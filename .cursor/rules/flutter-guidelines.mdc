# Flutter 개발 가이드라인

## 프로젝트 구조

### 권장 폴더 구조
```
lib/
  ├── main.dart              # 앱 진입점
  ├── core/                  # 핵심 기능
  │   ├── constants/         # 상수
  │   │   ├── app_colors.dart
  │   │   └── app_constants.dart
  │   ├── theme/            # 테마
  │   │   └── app_theme.dart
  │   └── utils/            # 유틸리티
  ├── features/             # 기능별 모듈
  │   ├── auth/             # 인증
  │   │   ├── screens/
  │   │   ├── widgets/
  │   │   └── services/
  │   ├── matching/         # 매칭
  │   │   ├── screens/
  │   │   ├── widgets/
  │   │   └── models/
  │   └── profile/          # 프로필
  └── shared/               # 공통 컴포넌트
      ├── widgets/          # 공통 위젯
      └── services/         # 공통 서비스
```

## 디자인 시스템 적용

### 색상 팔레트
```dart
// lib/core/constants/app_colors.dart
class AppColors {
  static const Color primary = Color(0xFF4CAF50);      // 라임 그린
  static const Color background = Color(0xFFFFFFFF);   // 흰색
  static const Color textPrimary = Color(0xFF333333);  // 진한 회색
  static const Color textSecondary = Color(0xFF666666); // 중간 회색
  static const Color border = Color(0xFFE5E5E5);       // 연한 회색
}
```

### 테마 설정
```dart
// lib/core/theme/app_theme.dart
class AppTheme {
  static ThemeData get lightTheme {
    return ThemeData(
      primaryColor: AppColors.primary,
      scaffoldBackgroundColor: AppColors.background,
      textTheme: const TextTheme(
        headline1: TextStyle(
          fontSize: 32,
          fontWeight: FontWeight.bold,
          color: AppColors.textPrimary,
        ),
        bodyText1: TextStyle(
          fontSize: 16,
          color: AppColors.textPrimary,
        ),
      ),
    );
  }
}
```

## 카드 컴포넌트 구현

### 매칭 카드 위젯
```dart
class MatchingCard extends StatelessWidget {
  final Matching matching;
  
  const MatchingCard({
    Key? key,
    required this.matching,
  }) : super(key: key);
  
  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.all(8),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // 헤더 (제목 + 레벨 배지)
            _buildHeader(),
            const SizedBox(height: 8),
            // 설명
            _buildDescription(),
            const SizedBox(height: 12),
            // 상세 정보
            _buildDetails(),
            const SizedBox(height: 8),
            // 북마크 (조회수 + 좋아요)
            _buildBookmark(),
          ],
        ),
      ),
    );
  }
  
  Widget _buildHeader() {
    return Row(
      children: [
        Expanded(
          child: Text(
            matching.title,
            style: const TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.w600,
              color: AppColors.textPrimary,
            ),
          ),
        ),
        _buildLevelBadge(matching.level),
      ],
    );
  }
  
  Widget _buildLevelBadge(String level) {
    Color badgeColor;
    switch (level) {
      case '초심':
        badgeColor = AppColors.primary;
        break;
      case 'D조':
        badgeColor = Colors.blue;
        break;
      case 'C조':
        badgeColor = Colors.orange;
        break;
      default:
        badgeColor = AppColors.primary;
    }
    
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: badgeColor.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Text(
        level,
        style: TextStyle(
          fontSize: 12,
          fontWeight: FontWeight.w500,
          color: badgeColor,
        ),
      ),
    );
  }
  
  Widget _buildDetails() {
    return Wrap(
      spacing: 12,
      children: [
        _buildDetailItem('📍', matching.location),
        _buildDetailItem('🕒', matching.date),
        _buildDetailItem('👥', '${matching.currentCount}/${matching.maxCount}명'),
        _buildDetailItem('🏸', '급수: ${matching.level}'),
      ],
    );
  }
  
  Widget _buildDetailItem(String icon, String text) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Text(icon),
        const SizedBox(width: 4),
        Text(
          text,
          style: const TextStyle(
            fontSize: 14,
            color: AppColors.textSecondary,
          ),
        ),
      ],
    );
  }
  
  Widget _buildBookmark() {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(
          '조회 ${matching.viewCount}',
          style: const TextStyle(
            fontSize: 14,
            color: AppColors.textSecondary,
          ),
        ),
        Row(
          children: [
            const Icon(
              Icons.favorite,
              size: 16,
              color: Colors.red,
            ),
            const SizedBox(width: 4),
            Text(
              '${matching.likeCount}',
              style: const TextStyle(
                fontSize: 14,
                color: AppColors.textSecondary,
              ),
            ),
          ],
        ),
      ],
    );
  }
}
```

## 상태 관리

### Provider 패턴 사용
```dart
// lib/features/matching/providers/matching_provider.dart
class MatchingProvider with ChangeNotifier {
  List<Matching> _matchings = [];
  bool _isLoading = false;
  
  List<Matching> get matchings => _matchings;
  bool get isLoading => _isLoading;
  
  Future<void> fetchMatchings() async {
    _isLoading = true;
    notifyListeners();
    
    try {
      // API 호출
      _matchings = await MatchingService.getMatchings();
    } catch (e) {
      // 에러 처리
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }
}
```

## 네비게이션

### 라우트 정의
```dart
// lib/core/routes/app_routes.dart
class AppRoutes {
  static const String home = '/';
  static const String login = '/login';
  static const String matchingList = '/matching-list';
  static const String matchingDetail = '/matching-detail';
  
  static Map<String, WidgetBuilder> get routes => {
    home: (context) => const HomeScreen(),
    login: (context) => const LoginScreen(),
    matchingList: (context) => const MatchingListScreen(),
    matchingDetail: (context) => const MatchingDetailScreen(),
  };
}
```

## API 통신

### 서비스 클래스
```dart
// lib/shared/services/api_service.dart
class ApiService {
  static const String baseUrl = 'https://api.minton.com';
  
  static Future<Map<String, dynamic>> get(String endpoint) async {
    final response = await http.get(Uri.parse('$baseUrl$endpoint'));
    
    if (response.statusCode == 200) {
      return json.decode(response.body);
    } else {
      throw Exception('Failed to load data');
    }
  }
  
  static Future<Map<String, dynamic>> post(
    String endpoint, 
    Map<String, dynamic> data
  ) async {
    final response = await http.post(
      Uri.parse('$baseUrl$endpoint'),
      headers: {'Content-Type': 'application/json'},
      body: json.encode(data),
    );
    
    if (response.statusCode == 200 || response.statusCode == 201) {
      return json.decode(response.body);
    } else {
      throw Exception('Failed to post data');
    }
  }
}
```

## 성능 최적화

### ListView.builder 사용
```dart
ListView.builder(
  itemCount: matchings.length,
  itemBuilder: (context, index) {
    return MatchingCard(matching: matchings[index]);
  },
)
```

### const 생성자 사용
```dart
const MatchingCard({
  Key? key,
  required this.matching,
}) : super(key: key);
```

## 에러 처리

### try-catch 패턴
```dart
Future<void> loadData() async {
  try {
    setState(() {
      _isLoading = true;
    });
    
    final data = await ApiService.get('/matchings');
    setState(() {
      _matchings = data;
      _isLoading = false;
    });
  } catch (e) {
    setState(() {
      _isLoading = false;
      _error = e.toString();
    });
    
    // 에러 메시지 표시
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('오류가 발생했습니다: $e')),
    );
  }
}
```
description:
globs:
alwaysApply: false
---
